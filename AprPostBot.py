from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from telegram.error import BadRequest
from telegram.constants import ParseMode


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
admin_chat_id = "-1002099677956"  # Telegram ID —á–∞—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
channel_id = "-1002039222512"  # Telegram ID –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π
token = "6961512157:AAFAKECDyKXMQf_KAbvmJZQbmMlFTYT9d9c"  # –í–∞—à —Ä–µ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–æ—Å—Ç—ñ–≤ —ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
posts_status = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    welcome_text = (
        '–ü—Ä–∏–≤—ñ—Ç! \n\n'
        '- –ù–∞–ø–∏—à–∏ –æ–± º—è–≤—É –ø—Ä–æ —Ä–æ–±–æ—Ç—É –∞–±–æ –ø–æ—à—É–∫ —Ä–æ–±–æ—Ç–∏\n'
        '- –î–æ–¥–∞–π –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\n'
        '- –í—ñ–¥–ø—Ä–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –±—É–¥–µ —Ç–æ–±—ñ —â–∞—Å—Ç—è\n\n'
        'üòà'
    )
    await update.message.reply_text(welcome_text)

async def submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.caption if update.message.photo else update.message.text
    photo = update.message.photo[-1].file_id if update.message.photo else None
    
    posts_status[update.message.message_id] = {
        "status": "pending",
        "user_id": update.message.from_user.id,
        "text": text,
        "photo": photo,
    }
    
    keyboard_admin = [
        [InlineKeyboardButton("–°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f'approve_{update.message.message_id}'),
         InlineKeyboardButton("–í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f'reject_{update.message.message_id}')]
    ]
    reply_markup_admin = InlineKeyboardMarkup(keyboard_admin)
    if photo:
        await context.bot.send_photo(chat_id=admin_chat_id, photo=photo, caption=text, reply_markup=reply_markup_admin)
    else:
        await context.bot.send_message(chat_id=admin_chat_id, text=text, reply_markup=reply_markup_admin)
    await update.message.reply_text("–î—è–∫—É—é –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ —Å–∫–æ—Ä–æ –∑'—è–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ñ")

async def handle_approval(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    action, message_id_str = query.data.split('_')
    message_id = int(message_id_str)
    message_info = posts_status.get(message_id)

    if not message_info:
        await context.bot.send_message(chat_id=admin_chat_id, text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –±—É–ª–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
        return

    user_id = message_info["user_id"]

    try:
        if action == 'approve' and message_info["status"] == "pending":
            if message_info["photo"]:
                await context.bot.send_photo(chat_id=channel_id, photo=message_info["photo"], caption=message_info["text"])
            else:
                await context.bot.send_message(chat_id=channel_id, text=message_info["text"])
            posts_status[message_id]["status"] = "approved"
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
        elif action == 'reject' and message_info["status"] == "pending":
            posts_status[message_id]["status"] = "rejected"
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à –ø–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
    except BadRequest as e:
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

async def handle_write_more(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    await context.bot.send_message(chat_id=query.from_user.id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ—Å—Ç.")

def main():
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, submit))
    application.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, submit))  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ
    application.add_handler(CallbackQueryHandler(handle_approval, pattern='^(approve|reject)_'))
    application.add_handler(CallbackQueryHandler(handle_write_more, pattern='^write_more$'))

    application.run_polling()

if __name__ == '__main__':
    main()
